/* soapStub.h
   Generated by gSOAP 2.8.49 for ./SWUS.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns2	"urn:swus"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20849
# error "GSOAP VERSION 20849 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns2__loginRequestElement;	/* ./SWUS.h:152 */
class _ns2__loginResponseElement;	/* ./SWUS.h:155 */
struct ns2__loginResponse;	/* ./SWUS.h:308 */
struct ns2__login;	/* ./SWUS.h:369 */

/* ./SWUS.h:152 */
#ifndef SOAP_TYPE__ns2__loginRequestElement
#define SOAP_TYPE__ns2__loginRequestElement (13)
/* complex XSD type 'ns2:loginRequestElement': */
class SOAP_CMAC _ns2__loginRequestElement {
      public:
        /// Required element 'username' of XSD type 'xsd:string'
        std::string username;
        /// Required element 'password' of XSD type 'xsd:string'
        std::string password;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__loginRequestElement
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__loginRequestElement; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__loginRequestElement, default initialized and not managed by a soap context
        virtual _ns2__loginRequestElement *soap_alloc(void) const { return SOAP_NEW(_ns2__loginRequestElement); }
      public:
        /// Constructor with initializations
        _ns2__loginRequestElement() : username(), password(), soap()
        { }
        virtual ~_ns2__loginRequestElement() { }
        /// Friend allocator used by soap_new__ns2__loginRequestElement(struct soap*, int)
        friend SOAP_FMAC1 _ns2__loginRequestElement * SOAP_FMAC2 soap_instantiate__ns2__loginRequestElement(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:155 */
#ifndef SOAP_TYPE__ns2__loginResponseElement
#define SOAP_TYPE__ns2__loginResponseElement (14)
/* complex XSD type 'ns2:loginResponseElement': */
class SOAP_CMAC _ns2__loginResponseElement {
      public:
        /// Required element 'success' of XSD type 'xsd:boolean'
        bool success;
        /// Required element 'errorCode' of XSD type 'xsd:integer'
        std::string errorCode;
        /// Required element 'errorString' of XSD type 'xsd:string'
        std::string errorString;
        /// Required element 'token' of XSD type 'xsd:string'
        std::string token;
        /// Required element 'ttl' of XSD type 'xsd:integer'
        std::string ttl;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__loginResponseElement
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__loginResponseElement; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__loginResponseElement, default initialized and not managed by a soap context
        virtual _ns2__loginResponseElement *soap_alloc(void) const { return SOAP_NEW(_ns2__loginResponseElement); }
      public:
        /// Constructor with initializations
        _ns2__loginResponseElement() : success(), errorCode(), errorString(), token(), ttl(), soap()
        { }
        virtual ~_ns2__loginResponseElement() { }
        /// Friend allocator used by soap_new__ns2__loginResponseElement(struct soap*, int)
        friend SOAP_FMAC1 _ns2__loginResponseElement * SOAP_FMAC2 soap_instantiate__ns2__loginResponseElement(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:308 */
#ifndef SOAP_TYPE_ns2__loginResponse
#define SOAP_TYPE_ns2__loginResponse (17)
/* complex XSD type 'ns2:loginResponse': */
struct SOAP_CMAC ns2__loginResponse {
      public:
        /** Optional element 'parameters' of XSD type 'ns2:loginResponseElement' */
        _ns2__loginResponseElement *parameters;
      public:
        /** Return unique type id SOAP_TYPE_ns2__loginResponse */
        int soap_type() const { return SOAP_TYPE_ns2__loginResponse; }
        /** Constructor with member initializations */
        ns2__loginResponse() : parameters()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__loginResponse * SOAP_FMAC2 soap_instantiate_ns2__loginResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:369 */
#ifndef SOAP_TYPE_ns2__login
#define SOAP_TYPE_ns2__login (22)
/* complex XSD type 'ns2:login': */
struct SOAP_CMAC ns2__login {
      public:
        /** Optional element 'parameters' of XSD type 'ns2:loginRequestElement' */
        _ns2__loginRequestElement *parameters;
      public:
        /** Return unique type id SOAP_TYPE_ns2__login */
        int soap_type() const { return SOAP_TYPE_ns2__login; }
        /** Constructor with member initializations */
        ns2__login() : parameters()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns2__login * SOAP_FMAC2 soap_instantiate_ns2__login(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:460 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ./SWUS.h:460 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ./SWUS.h:460 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ./SWUS.h:460 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ./SWUS.h:460 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* ./SWUS.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* ./SWUS.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* ./SWUS.h:141 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (12)
typedef std::string xsd__integer;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (16)
#endif

/* _ns2__loginResponseElement has binding name '_ns2__loginResponseElement' for type '' */
#ifndef SOAP_TYPE__ns2__loginResponseElement
#define SOAP_TYPE__ns2__loginResponseElement (14)
#endif

/* _ns2__loginRequestElement has binding name '_ns2__loginRequestElement' for type '' */
#ifndef SOAP_TYPE__ns2__loginRequestElement
#define SOAP_TYPE__ns2__loginRequestElement (13)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (12)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
#endif

/* struct ns2__login has binding name 'ns2__login' for type 'ns2:login' */
#ifndef SOAP_TYPE_ns2__login
#define SOAP_TYPE_ns2__login (22)
#endif

/* struct ns2__loginResponse has binding name 'ns2__loginResponse' for type 'ns2:loginResponse' */
#ifndef SOAP_TYPE_ns2__loginResponse
#define SOAP_TYPE_ns2__loginResponse (17)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (32)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (31)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (25)
#endif

/* _ns2__loginRequestElement * has binding name 'PointerTo_ns2__loginRequestElement' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__loginRequestElement
#define SOAP_TYPE_PointerTo_ns2__loginRequestElement (19)
#endif

/* _ns2__loginResponseElement * has binding name 'PointerTo_ns2__loginResponseElement' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__loginResponseElement
#define SOAP_TYPE_PointerTo_ns2__loginResponseElement (18)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */

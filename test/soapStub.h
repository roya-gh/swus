/* soapStub.h
   Generated by gSOAP 2.8.35 for ./SWUS.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns2   "urn:swus"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20835
# error "GSOAP VERSION 20835 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__anyType; /* ./SWUS.h:141 */
class xsd__boolean; /* ./SWUS.h:145 */
class xsd__integer_;    /* ./SWUS.h:155 */
class xsd__string;  /* ./SWUS.h:162 */
struct ns2__loginResponse;  /* ./SWUS.h:277 */
struct ns2__login;  /* ./SWUS.h:346 */

/* ./SWUS.h:141 */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (11)
/* Type xsd__anyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
public:
    /// Simple content of XSD type 'xsd:anyType' wrapped by this struct
    char* __item;
    /// Context that manages this object
    struct soap* soap;
public:
    /// Return unique type id SOAP_TYPE_xsd__anyType
    virtual int soap_type(void) const {
        return SOAP_TYPE_xsd__anyType;
    }
    /// (Re)set members to default values
    virtual void soap_default(struct soap*);
    /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
    virtual void soap_serialize(struct soap*) const;
    /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
    virtual int soap_put(struct soap*, const char* tag, const char* type) const;
    /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
    virtual int soap_out(struct soap*, const char* tag, int id, const char* type) const;
    /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
    virtual void* soap_get(struct soap*, const char* tag, const char* type);
    /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
    virtual void* soap_in(struct soap*, const char* tag, const char* type);
    /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
    virtual xsd__anyType* soap_alloc(void) const {
        return SOAP_NEW(xsd__anyType);
    }
public:
    /// Constructor with initializations
    xsd__anyType() {
        __item = (char*)0;
        soap = (struct soap*)0;
    }
    virtual ~xsd__anyType() { }
    /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
    friend SOAP_FMAC1 xsd__anyType* SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:145 */
#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (13)
/* Type xsd__boolean is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:boolean': */
class SOAP_CMAC xsd__boolean : public xsd__anyType {
public:
    /// Simple content of XSD type 'xsd:boolean' wrapped by this struct
    bool __item;
public:
    /// Return unique type id SOAP_TYPE_xsd__boolean
    virtual int soap_type(void) const {
        return SOAP_TYPE_xsd__boolean;
    }
    /// (Re)set members to default values
    virtual void soap_default(struct soap*);
    /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
    virtual void soap_serialize(struct soap*) const;
    /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
    virtual int soap_put(struct soap*, const char* tag, const char* type) const;
    /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
    virtual int soap_out(struct soap*, const char* tag, int id, const char* type) const;
    /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
    virtual void* soap_get(struct soap*, const char* tag, const char* type);
    /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
    virtual void* soap_in(struct soap*, const char* tag, const char* type);
    /// Return a new object of type xsd__boolean, default initialized and not managed by a soap context
    virtual xsd__boolean* soap_alloc(void) const {
        return SOAP_NEW(xsd__boolean);
    }
public:
    /// Constructor with initializations
    xsd__boolean() {
        __item = (bool)0;
    }
    virtual ~xsd__boolean() { }
    /// Friend allocator used by soap_new_xsd__boolean(struct soap*, int)
    friend SOAP_FMAC1 xsd__boolean* SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:155 */
#ifndef SOAP_TYPE_xsd__integer_
#define SOAP_TYPE_xsd__integer_ (17)
/* Type xsd__integer_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:integer': */
class SOAP_CMAC xsd__integer_ : public xsd__anyType {
public:
    /// Simple content of XSD type 'xsd:integer' wrapped by this struct
    std::string __item;
public:
    /// Return unique type id SOAP_TYPE_xsd__integer_
    virtual int soap_type(void) const {
        return SOAP_TYPE_xsd__integer_;
    }
    /// (Re)set members to default values
    virtual void soap_default(struct soap*);
    /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
    virtual void soap_serialize(struct soap*) const;
    /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
    virtual int soap_put(struct soap*, const char* tag, const char* type) const;
    /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
    virtual int soap_out(struct soap*, const char* tag, int id, const char* type) const;
    /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
    virtual void* soap_get(struct soap*, const char* tag, const char* type);
    /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
    virtual void* soap_in(struct soap*, const char* tag, const char* type);
    /// Return a new object of type xsd__integer_, default initialized and not managed by a soap context
    virtual xsd__integer_* soap_alloc(void) const {
        return SOAP_NEW(xsd__integer_);
    }
public:
    /// Constructor with initializations
    xsd__integer_() {
    }
    virtual ~xsd__integer_() { }
    /// Friend allocator used by soap_new_xsd__integer_(struct soap*, int)
    friend SOAP_FMAC1 xsd__integer_* SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:162 */
#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (18)
/* Type xsd__string is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:string': */
class SOAP_CMAC xsd__string : public xsd__anyType {
public:
    /// Simple content of XSD type 'xsd:string' wrapped by this struct
    std::string __item;
public:
    /// Return unique type id SOAP_TYPE_xsd__string
    virtual int soap_type(void) const {
        return SOAP_TYPE_xsd__string;
    }
    /// (Re)set members to default values
    virtual void soap_default(struct soap*);
    /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
    virtual void soap_serialize(struct soap*) const;
    /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
    virtual int soap_put(struct soap*, const char* tag, const char* type) const;
    /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
    virtual int soap_out(struct soap*, const char* tag, int id, const char* type) const;
    /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
    virtual void* soap_get(struct soap*, const char* tag, const char* type);
    /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
    virtual void* soap_in(struct soap*, const char* tag, const char* type);
    /// Return a new object of type xsd__string, default initialized and not managed by a soap context
    virtual xsd__string* soap_alloc(void) const {
        return SOAP_NEW(xsd__string);
    }
public:
    /// Constructor with initializations
    xsd__string() {
    }
    virtual ~xsd__string() { }
    /// Friend allocator used by soap_new_xsd__string(struct soap*, int)
    friend SOAP_FMAC1 xsd__string* SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:277 */
#ifndef SOAP_TYPE_ns2__loginResponse
#define SOAP_TYPE_ns2__loginResponse (19)
/* complex XSD type 'ns2:loginResponse': */
struct ns2__loginResponse {
public:
    /** Required element 'success' of XSD type 'xsd:boolean' */
    bool success;
    /** Required element 'errorCode' of XSD type 'xsd:integer' */
    std::string errorCode;
    /** Required element 'errorString' of XSD type 'xsd:string' */
    std::string errorString;
    /** Required element 'token' of XSD type 'xsd:string' */
    std::string token;
    /** Required element 'ttl' of XSD type 'xsd:integer' */
    std::string ttl;
public:
    /** Return unique type id SOAP_TYPE_ns2__loginResponse */
    int soap_type() const {
        return SOAP_TYPE_ns2__loginResponse;
    }
    /** Constructor with member initializations */
    ns2__loginResponse() {
        success = (bool)0;
    }
    /** Friend allocator used by soap_new_ns2__loginResponse(struct soap*, int) */
    friend SOAP_FMAC1 ns2__loginResponse* SOAP_FMAC2 soap_instantiate_ns2__loginResponse(struct soap*, int, const char*, const char*,
            size_t*);
};
#endif

/* ./SWUS.h:346 */
#ifndef SOAP_TYPE_ns2__login
#define SOAP_TYPE_ns2__login (22)
/* complex XSD type 'ns2:login': */
struct ns2__login {
public:
    /** Required element 'username' of XSD type 'xsd:string' */
    std::string username;
    /** Required element 'password' of XSD type 'xsd:string' */
    std::string password;
public:
    /** Return unique type id SOAP_TYPE_ns2__login */
    int soap_type() const {
        return SOAP_TYPE_ns2__login;
    }
    /** Constructor with member initializations */
    ns2__login() {
    }
    /** Friend allocator used by soap_new_ns2__login(struct soap*, int) */
    friend SOAP_FMAC1 ns2__login* SOAP_FMAC2 soap_instantiate_ns2__login(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ./SWUS.h:407 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
public:
    /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
    int soap_type() const {
        return SOAP_TYPE_SOAP_ENV__Header;
    }
    /** Constructor with member initializations */
    SOAP_ENV__Header() {
    }
    /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
    friend SOAP_FMAC1 SOAP_ENV__Header* SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*,
            size_t*);
};
#endif
#endif

/* ./SWUS.h:407 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
public:
    /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
    char* SOAP_ENV__Value;
    /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
    struct SOAP_ENV__Code* SOAP_ENV__Subcode;
public:
    /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
    int soap_type() const {
        return SOAP_TYPE_SOAP_ENV__Code;
    }
    /** Constructor with member initializations */
    SOAP_ENV__Code() {
        SOAP_ENV__Value = (char*)0;
        SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)0;
    }
    /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
    friend SOAP_FMAC1 SOAP_ENV__Code* SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ./SWUS.h:407 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
public:
    char* __any;
    /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
    /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
    int __type;
    void* fault;
public:
    /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
    int soap_type() const {
        return SOAP_TYPE_SOAP_ENV__Detail;
    }
    /** Constructor with member initializations */
    SOAP_ENV__Detail() {
        __any = (char*)0;
        __type = 0;
        fault = NULL;
    }
    /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
    friend SOAP_FMAC1 SOAP_ENV__Detail* SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*,
            size_t*);
};
#endif
#endif

/* ./SWUS.h:407 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
public:
    /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
    char* SOAP_ENV__Text;
public:
    /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
    int soap_type() const {
        return SOAP_TYPE_SOAP_ENV__Reason;
    }
    /** Constructor with member initializations */
    SOAP_ENV__Reason() {
        SOAP_ENV__Text = (char*)0;
    }
    /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
    friend SOAP_FMAC1 SOAP_ENV__Reason* SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*,
            size_t*);
};
#endif
#endif

/* ./SWUS.h:407 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
public:
    /** Optional element 'faultcode' of XSD type 'xsd:QName' */
    char* faultcode;
    /** Optional element 'faultstring' of XSD type 'xsd:string' */
    char* faultstring;
    /** Optional element 'faultactor' of XSD type 'xsd:string' */
    char* faultactor;
    /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
    struct SOAP_ENV__Detail* detail;
    /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
    struct SOAP_ENV__Code* SOAP_ENV__Code;
    /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
    struct SOAP_ENV__Reason* SOAP_ENV__Reason;
    /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
    char* SOAP_ENV__Node;
    /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
    char* SOAP_ENV__Role;
    /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
    struct SOAP_ENV__Detail* SOAP_ENV__Detail;
public:
    /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
    int soap_type() const {
        return SOAP_TYPE_SOAP_ENV__Fault;
    }
    /** Constructor with member initializations */
    SOAP_ENV__Fault() {
        faultcode = (char*)0;
        faultstring = (char*)0;
        faultactor = (char*)0;
        detail = (struct SOAP_ENV__Detail*)0;
        SOAP_ENV__Code = (struct SOAP_ENV__Code*)0;
        SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)0;
        SOAP_ENV__Node = (char*)0;
        SOAP_ENV__Role = (char*)0;
        SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)0;
    }
    /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
    friend SOAP_FMAC1 SOAP_ENV__Fault* SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*,
            size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* ./SWUS.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char* _QName;
#endif

/* ./SWUS.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char* _XML;
#endif

/* ./SWUS.h:151 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (16)
typedef std::string xsd__integer;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (14)
#endif

/* xsd__string has binding name 'xsd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (18)
#endif

/* xsd__integer_ has binding name 'xsd__integer_' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer_
#define SOAP_TYPE_xsd__integer_ (17)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (16)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (15)
#endif

/* xsd__boolean has binding name 'xsd__boolean' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (13)
#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
#endif

/* struct ns2__login has binding name 'ns2__login' for type 'ns2:login' */
#ifndef SOAP_TYPE_ns2__login
#define SOAP_TYPE_ns2__login (22)
#endif

/* struct ns2__loginResponse has binding name 'ns2__loginResponse' for type 'ns2:loginResponse' */
#ifndef SOAP_TYPE_ns2__loginResponse
#define SOAP_TYPE_ns2__loginResponse (19)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (32)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (31)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (25)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */

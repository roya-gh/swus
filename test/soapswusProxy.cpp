/* soapswusProxy.cpp
   Generated by gSOAP 2.8.35 for ./SWUS.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapswusProxy.h"

swusProxy::swusProxy() : soap(SOAP_IO_DEFAULT) {
    swusProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

swusProxy::swusProxy(const swusProxy& rhs) {
    soap_copy_context(this, &rhs);
    this->soap_endpoint = rhs.soap_endpoint;
}

swusProxy::swusProxy(const struct soap& _soap) : soap(_soap)
{ }

swusProxy::swusProxy(const char* endpoint) : soap(SOAP_IO_DEFAULT) {
    swusProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
    soap_endpoint = endpoint;
}

swusProxy::swusProxy(soap_mode iomode) : soap(iomode) {
    swusProxy_init(iomode, iomode);
}

swusProxy::swusProxy(const char* endpoint, soap_mode iomode) : soap(iomode) {
    swusProxy_init(iomode, iomode);
    soap_endpoint = endpoint;
}

swusProxy::swusProxy(soap_mode imode, soap_mode omode) : soap(imode, omode) {
    swusProxy_init(imode, omode);
}

swusProxy::~swusProxy() {
    this->destroy();
}

void swusProxy::swusProxy_init(soap_mode imode, soap_mode omode) {
    soap_imode(this, imode);
    soap_omode(this, omode);
    soap_endpoint = NULL;
    static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns2", "urn:swus", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
    soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
swusProxy* swusProxy::copy() {
    swusProxy* dup = SOAP_NEW_COPY(swusProxy(*(struct soap*)this));
    return dup;
}
#endif

swusProxy& swusProxy::operator=(const swusProxy& rhs) {
    soap_copy_context(this, &rhs);
    this->soap_endpoint = rhs.soap_endpoint;
    return *this;
}

void swusProxy::destroy() {
    soap_destroy(this);
    soap_end(this);
}

void swusProxy::reset() {
    this->destroy();
    soap_done(this);
    soap_initialize(this);
    swusProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void swusProxy::soap_noheader() {
    this->header = NULL;
}

::SOAP_ENV__Header* swusProxy::soap_header() {
    return this->header;
}

::SOAP_ENV__Fault* swusProxy::soap_fault() {
    return this->fault;
}

const char* swusProxy::soap_fault_string() {
    return *soap_faultstring(this);
}

const char* swusProxy::soap_fault_detail() {
    return *soap_faultdetail(this);
}

int swusProxy::soap_close_socket() {
    return soap_closesock(this);
}

int swusProxy::soap_force_close_socket() {
    return soap_force_closesock(this);
}

void swusProxy::soap_print_fault(FILE* fd) {
    ::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void swusProxy::soap_stream_fault(std::ostream& os) {
    ::soap_stream_fault(this, os);
}
#endif

char* swusProxy::soap_sprint_fault(char* buf, size_t len) {
    return ::soap_sprint_fault(this, buf, len);
}
#endif

int swusProxy::login(const char* endpoint, const char* soap_action, std::string username, std::string password,
                     struct ns2__loginResponse& _param_1) {
    struct soap* soap = this;
    struct ns2__login soap_tmp_ns2__login;
    if(endpoint) {
        soap_endpoint = endpoint;
    }
    if(soap_endpoint == NULL) {
        soap_endpoint = "http://api.ametisco.ir:39000";
    }
    if(soap_action == NULL) {
        soap_action = "";
    }
    soap_tmp_ns2__login.username = username;
    soap_tmp_ns2__login.password = password;
    soap_begin(soap);
    soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
    soap_serializeheader(soap);
    soap_serialize_ns2__login(soap, &soap_tmp_ns2__login);
    if(soap_begin_count(soap)) {
        return soap->error;
    }
    if(soap->mode & SOAP_IO_LENGTH) {
        if(soap_envelope_begin_out(soap)
                || soap_putheader(soap)
                || soap_body_begin_out(soap)
                || soap_put_ns2__login(soap, &soap_tmp_ns2__login, "ns2:login", "")
                || soap_body_end_out(soap)
                || soap_envelope_end_out(soap)) {
            return soap->error;
        }
    }
    if(soap_end_count(soap)) {
        return soap->error;
    }
    if(soap_connect(soap, soap_endpoint, soap_action)
            || soap_envelope_begin_out(soap)
            || soap_putheader(soap)
            || soap_body_begin_out(soap)
            || soap_put_ns2__login(soap, &soap_tmp_ns2__login, "ns2:login", "")
            || soap_body_end_out(soap)
            || soap_envelope_end_out(soap)
            || soap_end_send(soap)) {
        return soap_closesock(soap);
    }
    if(!static_cast<struct ns2__loginResponse*>(&_param_1)) { // NULL ref?
        return soap_closesock(soap);
    }
    soap_default_ns2__loginResponse(soap, &_param_1);
    if(soap_begin_recv(soap)
            || soap_envelope_begin_in(soap)
            || soap_recv_header(soap)
            || soap_body_begin_in(soap)) {
        return soap_closesock(soap);
    }
    if(soap_recv_fault(soap, 1)) {
        return soap->error;
    }
    soap_get_ns2__loginResponse(soap, &_param_1, "", NULL);
    if(soap->error) {
        return soap_recv_fault(soap, 0);
    }
    if(soap_body_end_in(soap)
            || soap_envelope_end_in(soap)
            || soap_end_recv(soap)) {
        return soap_closesock(soap);
    }
    return soap_closesock(soap);
}
/* End of client proxy code */
